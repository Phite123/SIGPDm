@page "/calidad/{id:int}"
<br />
<button class="btn btn-outline-primary" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<br />
<h1>Información correspondiente a la orden n° @id</h1>
<hr />

@if (oTrabajo.Estado == "CC")
{
    <button class="btn btn-outline-danger" Click=@(() => alertaRechazar("la carpeta"))>Rechazar carpeta</button>
    <a>&nbsp;</a>
    <button class="btn btn-outline-success" Click=@(() => alertaAprobar("la carpeta"))>Aprobar carpeta</button>
}

@if (oTrabajo.Estado == "CPU")
{
    <button class="btn btn-outline-danger" Click=@(() => alertaRechazar("el pulido"))>Rechazar pulido</button>
    <a>&nbsp;</a>
    <button class="btn btn-outline-success" Click=@(() => alertaAprobar("el pulido"))>Aprobar pulido</button>
}

@if (oTrabajo.Estado == "CPL")
{
    <button class="btn btn-outline-danger" Click=@(() => alertaRechazar("el plegado"))>Rechazar plegado</button>
    <a>&nbsp;</a>
    <button class="btn btn-outline-success" Click=@(() => alertaAprobar("el plegado"))>Aprobar plegado</button>
}

@if (oTrabajo.Estado == "CA")
{
    <button class="btn btn-outline-danger" Click=@(() => alertaRechazar("el armado"))>Rechazar armado</button>
    <a>&nbsp;</a>
    <button class="btn btn-outline-success" Click=@(() => alertaAprobar("el armado"))>Aprobar armado</button>
}

@code {
    [Parameter] public int id { get; set; }
    Ordentrabajo oTrabajo = new();

    protected override async Task OnInitializedAsync()
    {

        var response = await http.GetFromJsonAsync<Respuesta<Ordentrabajo>>($"/api/ot/{id}");
        oTrabajo = response.List;

    }
    async Task ComeBack()
    {
        nav.NavigateTo("/calidad");
    }

    public async Task alertaAprobar(string proceso)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = $"Se aprobará {proceso}",
                Icon = SweetAlertIcon.Success,
                ShowCancelButton = true,
                ConfirmButtonText = "Aprobar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            if (proceso == "la carpeta") rccbutton();
            if (proceso == "el pulido") rpubutton();
            if (proceso == "el plegado") rplbutton();
            if (proceso == "el armado") rabutton();
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    public async Task alertaRechazar(string proceso)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = $"Se rechazará {proceso}",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Rechazar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            if (proceso == "la carpeta") rccbutton();
            if (proceso == "el pulido") rpubutton();
            if (proceso == "el plegado") rplbutton();
            if (proceso == "el armado") rabutton();
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task ccbutton()
    {
        oTrabajo.Estado = "Punzonado";
        await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);
        ComeBack();
    }
    async Task rccbutton()
    {
        oTrabajo.Estado = "Oficina tecnica";
        await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);
        ComeBack();
    }

    async Task pubutton()
    {
        oTrabajo.Estado = "Pintura";
        await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);
        ComeBack();
    }
    async Task rpubutton()
    {
        oTrabajo.Estado = "Pulido";
        await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);
        ComeBack();
    }
    async Task plbutton()
    {
        oTrabajo.Estado = "Soldadura";
        await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);
        ComeBack();
    }
    async Task rplbutton()
    {
        oTrabajo.Estado = "Plegado";
        await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);
        ComeBack();
    }
    async Task abutton()
    {
        oTrabajo.Estado = "Despacho";
        await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);
        ComeBack();
    }
    async Task rabutton()
    {
        oTrabajo.Estado = "Armado";
        await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);
        ComeBack();
    }
}
